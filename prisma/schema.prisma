
// Defines the data source (your Postgres database) and the provider.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Defines the generator for the Prisma Client.
generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum Role {
  ADMIN
  MEMBER
}

enum RuleSeverity {
  REQUIRED
  WARNING
}

enum SubmissionState {
  DRAFT
  VALIDATED
  PACKET_READY
  SUBMITTED
  POLLING
  APPROVED
  NEEDS_INFO
}


// --- MODELS ---

// Represents a city, state, or other governing body.
model Jurisdiction {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // A Jurisdiction can have many RuleSets.
  ruleSets  RuleSet[]
}

// A versioned set of rules for a specific jurisdiction.
model RuleSet {
  id             String       @id @default(cuid())
  version        Int
  jurisdictionId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Defines the one-to-many relationship with Jurisdiction.
  jurisdiction   Jurisdiction @relation(fields: [jurisdictionId], references: [id])
  
  // A RuleSet can have many individual Rules.
  rules          Rule[]

  @@unique([jurisdictionId, version], name: "unique_jurisdiction_version")
}

// A single, specific rule within a RuleSet.
model Rule {
  id          String       @id @default(cuid())
  ruleSetId   String
  key         String // e.g., "PROJECT_NAME_MIN_LENGTH"
  severity    RuleSeverity
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Defines the one-to-many relationship with RuleSet.
  ruleSet     RuleSet      @relation(fields: [ruleSetId], references: [id])
}

// The main object representing a user's permit application.
model PermitSubmission {
  id                 String          @id @default(cuid())
  projectName        String
  organizationId     String
  state              SubmissionState @default(DRAFT)
  completenessScore  Float           @default(0.0)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id])
  // A submission has many rule results associated with it.
  ruleResults        RuleResult[]
  workflowEvents WorkflowEvent[]
  packets        Packet[]
}

// The result of running a specific Rule against a Submission.
model RuleResult {
  id             String       @id @default(cuid())
  submissionId   String
  ruleKey        String
  passed         Boolean
  message        String
  severity       RuleSeverity
  createdAt      DateTime     @default(now())

  // Defines the one-to-many relationship with PermitSubmission.
  submission     PermitSubmission @relation(fields: [submissionId], references: [id])
}

model WorkflowEvent {
  id           String   @id @default(cuid())
  submissionId String
  eventType    String // e.g., "STATE_TRANSITION"
  fromState    String?
  toState      String?
  metadata     Json?
  createdAt    DateTime @default(now())

  submission   PermitSubmission @relation(fields: [submissionId], references: [id])
}

model Packet {
  id           String   @id @default(cuid())
  submissionId String   @unique // Each submission has one packet for now
  filePath     String
  sizeBytes    Int
  createdAt    DateTime @default(now())

  submission   PermitSubmission @relation(fields: [submissionId], references: [id])
}

model Organization {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  submissions PermitSubmission[]
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  password       String       // This will store the hashed password
  role           Role         @default(MEMBER)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
}